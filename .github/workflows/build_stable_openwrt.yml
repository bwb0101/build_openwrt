#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Stable OpenWrt[schedule]

on:
  #repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 0 0 */5 * *

env:
  REPO_URL: https://github.com/jkingben/openwrt
  REPO_BRANCH: 22.03
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FEED_DIY_SH: feed_diy.sh
#   UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        date=$(date +%Y%m%d%H%M%S)
        echo "DATE=$date" >> $GITHUB_ENV

    - name: Sync my pkgs
      run: |
        mkdir mypkg
        git clone https://github.com/Lienol/openwrt-packages.git -b 22.03 mypkg/pkg
        git clone https://github.com/Lienol/openwrt-luci.git -b 22.03 mypkg/luci
        git clone https://github.com/kenzok8/openwrt-packages.git kenzok8
        rm -rf mypkg/pkg/.git*
        rm -rf mypkg/luci/.git*
        rm -rf mypkg/pkg/net/smartdns
        rm -rf mypkg/luci/applications/luci-app-smartdns
        cp -r kenzok8/smartdns mypkg/pkg/net
        cp -r kenzok8/mosdns mypkg/pkg/net
        cp -r kenzok8/luci-app-smartdns mypkg/luci/applications
        cp -r kenzok8/luci-app-mosdns mypkg/luci/applications
        cp -r kenzok8/luci-theme-atmaterial_new mypkg/luci/themes
        cp -r kenzok8/luci-theme-neobird mypkg/luci/themes
    - name: Push my packages
      uses: s0/git-publish-subdir-action@develop
      env:
          REPO: self
          BRANCH: packages
          FOLDER: mypkg/pkg
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ${{ env.DATE }}({sha})"
    - name: Push my luci
      uses: s0/git-publish-subdir-action@develop
      env:
          REPO: self
          BRANCH: luci
          FOLDER: mypkg/luci
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ${{ env.DATE }}({sha})"

    - name: Clone source code
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf $GITHUB_WORKSPACE/openwrt /workdir/openwrt
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
#     - name: Cache
#       uses: klever1988/cachewrtbuild@main
#       with:
#         ccache: 'true'
#         prefix: ${{ github.workspace }}/openwrt
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a
      
    - name: Execute feed diy shell
      run: |
        chmod +x $FEED_DIY_SH
        $GITHUB_WORKSPACE/$FEED_DIY_SH
    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

#     - name: Upload bin directory
#       uses: actions/upload-artifact@main
#       if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
#       with:
#         name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
#         path: openwrt/bin
#     - name: Deploy packags to server
#       if: steps.compile.outputs.status == 'success' && !cancelled()
#       run: |
#         echo 'put -r openwrt/bin/* /www/openwrt/snapshots' > upload
#         echo '${{ secrets.SFTP_PRIVATE_KEY }}' > ssh_key
#         chmod 600 ssh_key
#         ssh -o StrictHostKeyChecking=no -p 2222 -i ssh_key root@${{ secrets.SFTP_SERVER_IP }} mkdir -p /www/openwrt/snapshots
#         sftp -o StrictHostKeyChecking=no -b upload -P 2222 -i ssh_key root@${{ secrets.SFTP_SERVER_IP }}
#         echo 'deploy finished'
#         rm -rf ssh_key
    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        mv packages $GITHUB_WORKSPACE
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
    - name: Generate release tag
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M(R_$REPO_BRANCH)")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # targets下的固件超过100m上限，不能上传需要删除
    - name: Move packages to src path
      if: steps.tag.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf *
        mv $GITHUB_WORKSPACE/packages .
    - name: Push openwrt
      uses: s0/git-publish-subdir-action@develop
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
          REPO: self
          BRANCH: openwrt_stable
          FOLDER: openwrt/bin
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ${{ env.DATE }}({sha})"

    - name: Update version
      run: mkdir _ver && echo "${{ env.DATE }}" > _ver/version
      
    - name: Push self update info
      uses: s0/git-publish-subdir-action@develop
      env:
          REPO: self
          BRANCH: main
          FOLDER: _ver
          CLEAR_GLOBS_FILE: ".clear-target-files"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ${{ env.DATE }}({sha})"

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
